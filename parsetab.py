
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'O0\rf\xfe#\x08g>g\x13J\xb7\xd6\x87\x07'
    
_lr_action_items = {'WHILE':([0,2,3,4,6,7,8,12,18,28,42,43,45,57,58,59,60,61,62,63,64,65,66,],[-3,5,-8,-9,-11,-10,-2,5,-7,-4,5,5,-12,-34,-25,-35,-32,5,-23,5,5,-33,-24,]),'NEQ':([19,20,22,23,24,25,46,48,49,50,51,],[-21,-22,-13,-20,-14,41,-15,-16,-18,-17,-19,]),'LE':([19,20,22,23,24,25,46,48,49,50,51,],[-21,-22,-13,-20,-14,32,-15,-16,-18,-17,-19,]),')':([19,20,22,23,24,26,27,31,46,47,48,49,50,51,52,53,54,55,56,],[-21,-22,-13,-20,-14,42,43,46,-15,-29,-16,-18,-17,-19,-28,-31,-26,-30,-27,]),'(':([5,9,13,14,17,21,32,33,34,35,36,37,38,39,40,41,],[13,14,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'+':([19,20,22,23,24,25,30,31,46,47,48,49,50,51,52,53,54,55,56,],[-21,-22,-13,-20,-14,33,33,33,-15,33,-16,-18,-17,-19,33,33,33,33,33,]),'*':([19,20,22,23,24,25,30,31,46,47,48,49,50,51,52,53,54,55,56,],[-21,-22,-13,-20,-14,34,34,34,-15,34,34,-18,34,-19,34,34,34,34,34,]),'-':([19,20,22,23,24,25,30,31,46,47,48,49,50,51,52,53,54,55,56,],[-21,-22,-13,-20,-14,35,35,35,-15,35,-16,-18,-17,-19,35,35,35,35,35,]),',':([15,16,44,],[29,-6,-5,]),'/':([19,20,22,23,24,25,30,31,46,47,48,49,50,51,52,53,54,55,56,],[-21,-22,-13,-20,-14,36,36,36,-15,36,36,-18,36,-19,36,36,36,36,36,]),'INTEGER':([13,14,17,21,32,33,34,35,36,37,38,39,40,41,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),';':([15,16,19,20,22,23,24,30,44,46,48,49,50,51,],[28,-6,-21,-22,-13,-20,-14,45,-5,-15,-16,-18,-17,-19,]),'=':([11,],[17,]),'<':([19,20,22,23,24,25,46,48,49,50,51,],[-21,-22,-13,-20,-14,40,-15,-16,-18,-17,-19,]),'>':([19,20,22,23,24,25,46,48,49,50,51,],[-21,-22,-13,-20,-14,38,-15,-16,-18,-17,-19,]),'STRING':([13,14,17,21,32,33,34,35,36,37,38,39,40,41,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'ELSE':([45,57,58,59,60,62,65,66,],[-12,-34,-25,-35,-32,64,-33,-24,]),'GE':([19,20,22,23,24,25,46,48,49,50,51,],[-21,-22,-13,-20,-14,37,-15,-16,-18,-17,-19,]),'EQ':([19,20,22,23,24,25,46,48,49,50,51,],[-21,-22,-13,-20,-14,39,-15,-16,-18,-17,-19,]),'ID':([0,2,3,4,6,7,8,10,12,13,14,17,18,21,28,29,32,33,34,35,36,37,38,39,40,41,42,43,45,57,58,59,60,61,62,63,64,65,66,],[-3,11,-8,-9,-11,-10,-2,16,11,22,22,22,-7,22,-4,44,22,22,22,22,22,22,22,22,22,22,11,11,-12,-34,-25,-35,-32,11,-23,11,11,-33,-24,]),'IF':([0,2,3,4,6,7,8,12,18,28,42,43,45,57,58,59,60,61,62,63,64,65,66,],[-3,9,-8,-9,-11,-10,-2,9,-7,-4,9,9,-12,-34,-25,-35,-32,9,-23,9,9,-33,-24,]),'}':([3,4,6,7,18,45,57,58,59,60,62,63,65,66,],[-8,-9,-11,-10,-7,-12,-34,-25,-35,-32,-23,65,-33,-24,]),'FLOAT':([13,14,17,21,32,33,34,35,36,37,38,39,40,41,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'{':([42,43,64,],[61,61,61,]),'$end':([1,3,4,6,7,12,18,45,57,58,59,60,62,65,66,],[0,-8,-9,-11,-10,-1,-7,-12,-34,-25,-35,-32,-23,-33,-24,]),'TYPE':([0,2,8,28,],[-3,10,-2,-4,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarations':([0,],[2,]),'const':([13,14,17,21,32,33,34,35,36,37,38,39,40,41,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'vars':([10,],[15,]),'assignment':([2,12,42,43,61,63,64,],[4,4,60,60,4,4,60,]),'instruction':([2,12,61,63,],[3,18,3,18,]),'stmt':([42,43,64,],[58,62,66,]),'while_instr':([2,12,42,43,61,63,64,],[6,6,59,59,6,6,59,]),'choice_instr':([2,12,42,43,61,63,64,],[7,7,57,57,7,7,57,]),'program':([0,],[1,]),'declaration':([2,],[8,]),'expression':([13,14,17,21,32,33,34,35,36,37,38,39,40,41,],[25,25,30,31,47,48,49,50,51,52,53,54,55,56,]),'condition':([13,14,],[26,27,]),'instructions':([2,61,],[12,63,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations instructions','program',2,'p_program','lab6.py',127),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','lab6.py',131),
  ('declarations -> <empty>','declarations',0,'p_declarations','lab6.py',132),
  ('declaration -> TYPE vars ;','declaration',3,'p_declaration','lab6.py',141),
  ('vars -> vars , ID','vars',3,'p_vars','lab6.py',149),
  ('vars -> ID','vars',1,'p_vars','lab6.py',150),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','lab6.py',158),
  ('instructions -> instruction','instructions',1,'p_instructions','lab6.py',159),
  ('instruction -> assignment','instruction',1,'p_instruction','lab6.py',169),
  ('instruction -> choice_instr','instruction',1,'p_instruction','lab6.py',170),
  ('instruction -> while_instr','instruction',1,'p_instruction','lab6.py',171),
  ('assignment -> ID = expression ;','assignment',4,'p_assignment','lab6.py',175),
  ('expression -> ID','expression',1,'p_expression_id','lab6.py',179),
  ('expression -> const','expression',1,'p_expression_const','lab6.py',183),
  ('expression -> ( expression )','expression',3,'p_expression_bra','lab6.py',187),
  ('expression -> expression + expression','expression',3,'p_arithm_expression','lab6.py',191),
  ('expression -> expression - expression','expression',3,'p_arithm_expression','lab6.py',192),
  ('expression -> expression * expression','expression',3,'p_arithm_expression','lab6.py',193),
  ('expression -> expression / expression','expression',3,'p_arithm_expression','lab6.py',194),
  ('const -> INTEGER','const',1,'p_const_int','lab6.py',199),
  ('const -> FLOAT','const',1,'p_const_flo','lab6.py',203),
  ('const -> STRING','const',1,'p_const_str','lab6.py',207),
  ('choice_instr -> IF ( condition ) stmt','choice_instr',5,'p_choice_instr1','lab6.py',211),
  ('choice_instr -> IF ( condition ) stmt ELSE stmt','choice_instr',7,'p_choice_instr2','lab6.py',216),
  ('while_instr -> WHILE ( condition ) stmt','while_instr',5,'p_while_instr','lab6.py',220),
  ('condition -> expression EQ expression','condition',3,'p_condition','lab6.py',224),
  ('condition -> expression NEQ expression','condition',3,'p_condition','lab6.py',225),
  ('condition -> expression GE expression','condition',3,'p_condition','lab6.py',226),
  ('condition -> expression LE expression','condition',3,'p_condition','lab6.py',227),
  ('condition -> expression < expression','condition',3,'p_condition','lab6.py',228),
  ('condition -> expression > expression','condition',3,'p_condition','lab6.py',229),
  ('stmt -> assignment','stmt',1,'p_stmt','lab6.py',233),
  ('stmt -> { instructions }','stmt',3,'p_stmt','lab6.py',234),
  ('stmt -> choice_instr','stmt',1,'p_stmt','lab6.py',235),
  ('stmt -> while_instr','stmt',1,'p_stmt','lab6.py',236),
]
